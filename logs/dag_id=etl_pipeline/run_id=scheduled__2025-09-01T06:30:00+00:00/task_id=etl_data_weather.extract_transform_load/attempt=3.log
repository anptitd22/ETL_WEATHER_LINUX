{"timestamp":"2025-09-01T06:47:59.647180","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-01T06:47:59.647559","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/main.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-01T06:48:00.226800Z","level":"info","event":"WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:00.840258Z","level":"error","event":"25/09/01 06:48:00 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:00.967875Z","level":"error","event":"Setting default log level to \"WARN\".","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:00.968168Z","level":"error","event":"To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.705481Z","level":"info","event":"Iceberg SparkCatalog OK.","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.782771Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.782978Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.783044Z","level":"info","event":"Current task name:etl_data_weather.extract_transform_load","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.783104Z","level":"info","event":"Dag name:etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.783153Z","level":"info","event":"extract data from file","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.792593Z","level":"info","event":"spark.hadoop.fs.s3a.vectored.read.min.seek.size = 131072","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.792758Z","level":"info","event":"spark.hadoop.fs.s3a.access.key = admin","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.792798Z","level":"info","event":"spark.hadoop.fs.s3a.threads.max = 10","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.792827Z","level":"info","event":"spark.hadoop.fs.s3a.secret.key = admin12345","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.792866Z","level":"info","event":"spark.hadoop.fs.s3a.connection.ssl.enabled = false","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.792899Z","level":"info","event":"spark.hadoop.fs.s3a.path.style.access = true","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.792928Z","level":"info","event":"spark.driver.host = a46a4c60815b","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.792955Z","level":"info","event":"spark.hadoop.fs.s3a.connection.part.upload.timeout = 60000","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.792984Z","level":"info","event":"spark.hadoop.fs.s3a.aws.credentials.provider = org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793011Z","level":"info","event":"spark.hadoop.fs.s3a.attempts.maximum = 3","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793038Z","level":"info","event":"spark.driver.port = 38947","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793066Z","level":"info","event":"spark.app.id = local-1756709281648","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793093Z","level":"info","event":"spark.app.name = BAITEST","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793119Z","level":"info","event":"spark.jars = /opt/spark/jars/hadoop-aws-3.3.4.jar,/opt/spark/jars/aws-java-sdk-bundle-1.12.787.jar,/opt/spark/jars/ojdbc11.jar,/opt/spark/jars/iceberg-spark-runtime-3.5_2.12-1.9.2.jar,/opt/spark/jars/iceberg-aws-bundle-1.9.2.jar","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793235Z","level":"info","event":"spark.sql.adaptive.coalescePartitions.enabled = false","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793270Z","level":"info","event":"spark.sql.catalog.local.type = hadoop","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793299Z","level":"info","event":"spark.hadoop.fs.s3a.connection.idle.time = 60000","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793327Z","level":"info","event":"spark.hadoop.fs.s3a.vectored.read.max.merged.size = 2097152","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793355Z","level":"info","event":"spark.hadoop.fs.s3a.connection.establish.timeout = 5000","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793382Z","level":"info","event":"spark.serializer.objectStreamReset = 100","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793409Z","level":"info","event":"spark.master = local[*]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793437Z","level":"info","event":"spark.sql.catalog.local.warehouse = s3a://warehouse/","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793464Z","level":"info","event":"spark.app.startTime = 1756709281089","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793491Z","level":"info","event":"spark.submit.deployMode = client","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793517Z","level":"info","event":"spark.sql.adaptive.enabled = false","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793543Z","level":"info","event":"spark.hadoop.fs.s3a.retry.limit = 5","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793569Z","level":"info","event":"spark.hadoop.fs.s3a.multipart.size = 104857600","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793599Z","level":"info","event":"spark.driver.extraJavaOptions = -Djava.net.preferIPv6Addresses=false -XX:+IgnoreUnrecognizedVMOptions --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens=java.base/jdk.internal.ref=ALL-UNNAMED --add-opens=java.base/sun.nio.ch=ALL-UNNAMED --add-opens=java.base/sun.nio.cs=ALL-UNNAMED --add-opens=java.base/sun.security.action=ALL-UNNAMED --add-opens=java.base/sun.util.calendar=ALL-UNNAMED --add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED -Djdk.reflect.useDirectMethodHandle=false","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793631Z","level":"info","event":"spark.app.initial.jar.urls = spark://a46a4c60815b:38947/jars/ojdbc11.jar,spark://a46a4c60815b:38947/jars/iceberg-spark-runtime-3.5_2.12-1.9.2.jar,spark://a46a4c60815b:38947/jars/iceberg-aws-bundle-1.9.2.jar,spark://a46a4c60815b:38947/jars/aws-java-sdk-bundle-1.12.787.jar,spark://a46a4c60815b:38947/jars/hadoop-aws-3.3.4.jar","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793661Z","level":"info","event":"spark.hadoop.fs.s3a.connection.maximum = 15","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793688Z","level":"info","event":"spark.executor.extraClassPath = /opt/spark/jars/*","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793715Z","level":"info","event":"spark.hadoop.fs.s3a.socket.send.buffer = 65536","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793741Z","level":"info","event":"spark.executor.id = driver","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793767Z","level":"info","event":"spark.hadoop.fs.s3a.connection.timeout = 60000","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793793Z","level":"info","event":"spark.hadoop.fs.s3a.retry.interval = 500","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793823Z","level":"info","event":"spark.repl.local.jars = file:///opt/spark/jars/hadoop-aws-3.3.4.jar,file:///opt/spark/jars/aws-java-sdk-bundle-1.12.787.jar,file:///opt/spark/jars/ojdbc11.jar,file:///opt/spark/jars/iceberg-spark-runtime-3.5_2.12-1.9.2.jar,file:///opt/spark/jars/iceberg-aws-bundle-1.9.2.jar","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793852Z","level":"info","event":"spark.sql.extensions = org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793889Z","level":"info","event":"spark.driver.extraClassPath = /opt/spark/jars/*","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793916Z","level":"info","event":"spark.hadoop.fs.s3a.socket.recv.buffer = 65536","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793942Z","level":"info","event":"spark.hadoop.fs.s3a.impl = org.apache.hadoop.fs.s3a.S3AFileSystem","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793967Z","level":"info","event":"spark.sql.catalog.local = org.apache.iceberg.spark.SparkCatalog","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.793994Z","level":"info","event":"spark.rdd.compress = True","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.794020Z","level":"info","event":"spark.hadoop.fs.s3a.threads.keepalivetime = 60000","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.794047Z","level":"info","event":"spark.executor.extraJavaOptions = -Djava.net.preferIPv6Addresses=false -XX:+IgnoreUnrecognizedVMOptions --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens=java.base/jdk.internal.ref=ALL-UNNAMED --add-opens=java.base/sun.nio.ch=ALL-UNNAMED --add-opens=java.base/sun.nio.cs=ALL-UNNAMED --add-opens=java.base/sun.security.action=ALL-UNNAMED --add-opens=java.base/sun.util.calendar=ALL-UNNAMED --add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED -Djdk.reflect.useDirectMethodHandle=false","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.794074Z","level":"info","event":"spark.hadoop.fs.s3a.multipart.purge.age = 86400","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.794101Z","level":"info","event":"spark.app.submitTime = 1756709280955","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.794127Z","level":"info","event":"spark.submit.pyFiles =","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.794153Z","level":"info","event":"spark.hadoop.fs.s3a.endpoint = http://minio:9000","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.794179Z","level":"info","event":"spark.ui.showConsoleProgress = true","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.794204Z","level":"info","event":"spark.hadoop.fs.s3a.fast.upload = true","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.794230Z","level":"info","event":"spark.hadoop.fs.s3a.impl.disable.cache = true","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:02.794256Z","level":"info","event":"spark.hadoop.fs.s3a.connection.request.timeout = 60000","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.456692Z","level":"error","event":"25/09/01 06:48:03 WARN MetricsConfig: Cannot locate configuration: tried hadoop-metrics2-s3a-file-system.properties,hadoop-metrics2.properties","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.496551Z","level":"error","event":"25/09/01 06:48:03 WARN VersionInfoUtils: The AWS SDK for Java 1.x entered maintenance mode starting July 31, 2024 and will reach end of support on December 31, 2025. For more information, see https://aws.amazon.com/blogs/developer/the-aws-sdk-for-java-1-x-is-in-maintenance-mode-effective-july-31-2024/","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.496693Z","level":"error","event":"You can print where on the file system the AWS SDK for Java 1.x core runtime is located by setting the AWS_JAVA_V1_PRINT_LOCATION environment variable or aws.java.v1.printLocation system property to 'true'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.496732Z","level":"error","event":"This message can be disabled by setting the AWS_JAVA_V1_DISABLE_DEPRECATION_ANNOUNCEMENT environment variable or aws.java.v1.disableDeprecationAnnouncement system property to 'true'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.496766Z","level":"error","event":"The AWS SDK for Java 1.x is being used here:","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.496796Z","level":"error","event":"at java.base/java.lang.Thread.getStackTrace(Thread.java:1619)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.496825Z","level":"error","event":"at com.amazonaws.util.VersionInfoUtils.printDeprecationAnnouncement(VersionInfoUtils.java:81)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.496864Z","level":"error","event":"at com.amazonaws.util.VersionInfoUtils.<clinit>(VersionInfoUtils.java:59)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.496895Z","level":"error","event":"at com.amazonaws.ClientConfiguration.<clinit>(ClientConfiguration.java:95)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.496921Z","level":"error","event":"at org.apache.hadoop.fs.s3a.S3AUtils.createAwsConf(S3AUtils.java:1258)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.496949Z","level":"error","event":"at org.apache.hadoop.fs.s3a.DefaultS3ClientFactory.createS3Client(DefaultS3ClientFactory.java:114)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.496976Z","level":"error","event":"at org.apache.hadoop.fs.s3a.S3AFileSystem.bindAWSClient(S3AFileSystem.java:898)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497003Z","level":"error","event":"at org.apache.hadoop.fs.s3a.S3AFileSystem.initialize(S3AFileSystem.java:534)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497030Z","level":"error","event":"at org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:3469)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497057Z","level":"error","event":"at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:537)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497083Z","level":"error","event":"at org.apache.hadoop.fs.Path.getFileSystem(Path.java:365)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497110Z","level":"error","event":"at org.apache.spark.sql.execution.streaming.FileStreamSink$.hasMetadata(FileStreamSink.scala:53)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497138Z","level":"error","event":"at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:366)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497165Z","level":"error","event":"at org.apache.spark.sql.DataFrameReader.loadV1Source(DataFrameReader.scala:229)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497192Z","level":"error","event":"at org.apache.spark.sql.DataFrameReader.$anonfun$load$2(DataFrameReader.scala:211)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497219Z","level":"error","event":"at scala.Option.getOrElse(Option.scala:189)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497246Z","level":"error","event":"at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:211)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497273Z","level":"error","event":"at org.apache.spark.sql.DataFrameReader.json(DataFrameReader.scala:362)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497302Z","level":"error","event":"at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497331Z","level":"error","event":"at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497357Z","level":"error","event":"at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497387Z","level":"error","event":"at java.base/java.lang.reflect.Method.invoke(Method.java:569)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497415Z","level":"error","event":"at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497441Z","level":"error","event":"at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:374)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497469Z","level":"error","event":"at py4j.Gateway.invoke(Gateway.java:282)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497495Z","level":"error","event":"at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497521Z","level":"error","event":"at py4j.commands.CallCommand.execute(CallCommand.java:79)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497547Z","level":"error","event":"at py4j.ClientServerConnection.waitForCommands(ClientServerConnection.java:182)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497573Z","level":"error","event":"at py4j.ClientServerConnection.run(ClientServerConnection.java:106)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:03.497600Z","level":"error","event":"at java.base/java.lang.Thread.run(Thread.java:840)","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T06:48:04.871699Z","level":"info","event":"spark data extracted","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:04.903266Z","level":"info","event":"root","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:04.903616Z","level":"info","event":" |-- list: array (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:04.903693Z","level":"info","event":" |    |-- element: struct (containsNull = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:04.903744Z","level":"info","event":" |    |    |-- dt: long (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:04.903796Z","level":"info","event":" |    |    |-- main: struct (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:04.903849Z","level":"info","event":" |    |    |    |-- temp: double (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:04.903921Z","level":"info","event":" |    |    |    |-- pressure: long (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:04.903973Z","level":"info","event":" |    |    |    |-- humidity: long (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:04.904025Z","level":"info","event":" |    |    |-- weather: array (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:04.904083Z","level":"info","event":" |    |    |    |-- element: struct (containsNull = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:04.904134Z","level":"info","event":" |    |    |    |    |-- description: string (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:04.904187Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:08.919316Z","level":"info","event":"+--------------------+","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:08.919738Z","level":"info","event":"|                list|","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:08.919828Z","level":"info","event":"+--------------------+","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:08.919928Z","level":"info","event":"|[{1752192000, {26...|","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:08.919994Z","level":"info","event":"+--------------------+","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:08.920077Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.066288Z","level":"info","event":"+----------+-----------+--------+--------+-----------+","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.066536Z","level":"info","event":"|        dt|temperature|pressure|humidity|description|","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.066596Z","level":"info","event":"+----------+-----------+--------+--------+-----------+","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.066647Z","level":"info","event":"|1752192000|      26.72|     998|      89|    mưa vừa|","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.066700Z","level":"info","event":"|1752202800|      27.27|     999|      81|    mưa nhẹ|","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.066752Z","level":"info","event":"|1752213600|      30.07|     999|      67|    mưa vừa|","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.066803Z","level":"info","event":"|1752224400|      29.96|     998|      75|    mưa vừa|","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.066879Z","level":"info","event":"|1752235200|      26.19|    1000|      91|    mưa vừa|","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.066970Z","level":"info","event":"+----------+-----------+--------+--------+-----------+","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.067028Z","level":"info","event":"only showing top 5 rows","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.067085Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.067140Z","level":"info","event":"spark data selected","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.067193Z","level":"info","event":"transform data","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.226478Z","level":"info","event":"load data","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.226691Z","level":"info","event":"(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=orcl-21c)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=WEATHER)))","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:10.309604Z","level":"info","event":"Table `WEATHER` created successfully.","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.005969Z","level":"info","event":"[TABLE_OR_VIEW_NOT_FOUND] The table or view `local`.`weather`.`events` cannot be found. Verify the spelling and correctness of the schema and catalog.","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.006224Z","level":"info","event":"If you did not qualify the name with a schema, verify the current_schema() output, or qualify the name with the correct schema and catalog.","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.006287Z","level":"info","event":"To tolerate the error on drop use DROP VIEW IF EXISTS or DROP TABLE IF EXISTS.;","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.006346Z","level":"info","event":"'AppendData 'UnresolvedRelation [local, weather, events], [__required_write_privileges__=INSERT], false, true","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.008588Z","level":"info","event":"+- Project [dt#60, coalesce(nanvl(temperature#66, cast(null as float)), cast(0.0 as float)) AS temperature#95, coalesce(nanvl(pressure#72, cast(null as float)), cast(0.0 as float)) AS pressure#96, coalesce(nanvl(humidity#78, cast(null as float)), cast(0.0 as float)) AS humidity#97, coalesce(description#84, cast(undefined as string)) AS description#98]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.008715Z","level":"info","event":"   +- Project [dt#60, temperature#66, pressure#72, humidity#78, cast(description#22 as string) AS description#84]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.008752Z","level":"info","event":"      +- Project [dt#60, temperature#66, pressure#72, cast(humidity#21L as float) AS humidity#78, description#22]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.008783Z","level":"info","event":"         +- Project [dt#60, temperature#66, cast(pressure#20L as float) AS pressure#72, humidity#21L, description#22]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.008816Z","level":"info","event":"            +- Project [dt#60, cast(temperature#19 as float) AS temperature#66, pressure#20L, humidity#21L, description#22]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.008845Z","level":"info","event":"               +- Project [cast(dt#18L as string) AS dt#60, temperature#19, pressure#20L, humidity#21L, description#22]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.008902Z","level":"info","event":"                  +- Deduplicate [pressure#20L, dt#18L, description#22, temperature#19, humidity#21L]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.008933Z","level":"info","event":"                     +- Filter atleastnnonnulls(1, dt#18L, temperature#19, pressure#20L, humidity#21L, description#22)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.008978Z","level":"info","event":"                        +- Project [data#16.dt AS dt#18L, data#16.main.temp AS temperature#19, data#16.main.pressure AS pressure#20L, data#16.main.humidity AS humidity#21L, data#16.weather[0].description AS description#22]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.009023Z","level":"info","event":"                           +- Project [data#16]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.009071Z","level":"info","event":"                              +- Generate explode(list#0), false, [data#16]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.009114Z","level":"info","event":"                                 +- Relation [list#0] json","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.009162Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.120117","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"AnalysisException","exc_value":"[TABLE_OR_VIEW_NOT_FOUND] The table or view `local`.`weather`.`events` cannot be found. Verify the spelling and correctness of the schema and catalog.\nIf you did not qualify the name with a schema, verify the current_schema() output, or qualify the name with the correct schema and catalog.\nTo tolerate the error on drop use DROP VIEW IF EXISTS or DROP TABLE IF EXISTS.;\n'AppendData 'UnresolvedRelation [local, weather, events], [__required_write_privileges__=INSERT], false, true\n+- Project [dt#60, coalesce(nanvl(temperature#66, cast(null as float)), cast(0.0 as float)) AS temperature#95, coalesce(nanvl(pressure#72, cast(null as float)), cast(0.0 as float)) AS pressure#96, coalesce(nanvl(humidity#78, cast(null as float)), cast(0.0 as float)) AS humidity#97, coalesce(description#84, cast(undefined as string)) AS description#98]\n   +- Project [dt#60, temperature#66, pressure#72, humidity#78, cast(description#22 as string) AS description#84]\n      +- Project [dt#60, temperature#66, pressure#72, cast(humidity#21L as float) AS humidity#78, description#22]\n         +- Project [dt#60, temperature#66, cast(pressure#20L as float) AS pressure#72, humidity#21L, description#22]\n            +- Project [dt#60, cast(temperature#19 as float) AS temperature#66, pressure#20L, humidity#21L, description#22]\n               +- Project [cast(dt#18L as string) AS dt#60, temperature#19, pressure#20L, humidity#21L, description#22]\n                  +- Deduplicate [pressure#20L, dt#18L, description#22, temperature#19, humidity#21L]\n                     +- Filter atleastnnonnulls(1, dt#18L, temperature#19, pressure#20L, humidity#21L, description#22)\n                        +- Project [data#16.dt AS dt#18L, data#16.main.temp AS temperature#19, data#16.main.pressure AS pressure#20L, data#16.main.humidity AS humidity#21L, data#16.weather[0].description AS description#22]\n                           +- Project [data#16]\n                              +- Generate explode(list#0), false, [data#16]\n                                 +- Relation [list#0] json\n","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":825,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1088,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":408,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":212,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":235,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/main.py","lineno":24,"name":"run_etl_weather"},{"filename":"/opt/airflow/dags/etl_data_weather.py","lineno":88,"name":"load_data_weather"},{"filename":"/opt/airflow/dags/spark/build_spark.py","lineno":94,"name":"write_spark_iceberg"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pyspark/sql/readwriter.py","lineno":2107,"name":"append"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/py4j/java_gateway.py","lineno":1322,"name":"__call__"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pyspark/errors/exceptions/captured.py","lineno":185,"name":"deco"}]}]}
{"timestamp":"2025-09-01T06:48:15.152814Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153169Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153248Z","level":"info","event":"Task:<Task(PythonOperator): etl_data_weather.extract_transform_load>","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153305Z","level":"info","event":"Failure caused by [TABLE_OR_VIEW_NOT_FOUND] The table or view `local`.`weather`.`events` cannot be found. Verify the spelling and correctness of the schema and catalog.","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153365Z","level":"info","event":"If you did not qualify the name with a schema, verify the current_schema() output, or qualify the name with the correct schema and catalog.","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153423Z","level":"info","event":"To tolerate the error on drop use DROP VIEW IF EXISTS or DROP TABLE IF EXISTS.;","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153481Z","level":"info","event":"'AppendData 'UnresolvedRelation [local, weather, events], [__required_write_privileges__=INSERT], false, true","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153540Z","level":"info","event":"+- Project [dt#60, coalesce(nanvl(temperature#66, cast(null as float)), cast(0.0 as float)) AS temperature#95, coalesce(nanvl(pressure#72, cast(null as float)), cast(0.0 as float)) AS pressure#96, coalesce(nanvl(humidity#78, cast(null as float)), cast(0.0 as float)) AS humidity#97, coalesce(description#84, cast(undefined as string)) AS description#98]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153614Z","level":"info","event":"   +- Project [dt#60, temperature#66, pressure#72, humidity#78, cast(description#22 as string) AS description#84]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153670Z","level":"info","event":"      +- Project [dt#60, temperature#66, pressure#72, cast(humidity#21L as float) AS humidity#78, description#22]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153726Z","level":"info","event":"         +- Project [dt#60, temperature#66, cast(pressure#20L as float) AS pressure#72, humidity#21L, description#22]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153781Z","level":"info","event":"            +- Project [dt#60, cast(temperature#19 as float) AS temperature#66, pressure#20L, humidity#21L, description#22]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153837Z","level":"info","event":"               +- Project [cast(dt#18L as string) AS dt#60, temperature#19, pressure#20L, humidity#21L, description#22]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153915Z","level":"info","event":"                  +- Deduplicate [pressure#20L, dt#18L, description#22, temperature#19, humidity#21L]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.153974Z","level":"info","event":"                     +- Filter atleastnnonnulls(1, dt#18L, temperature#19, pressure#20L, humidity#21L, description#22)","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.154031Z","level":"info","event":"                        +- Project [data#16.dt AS dt#18L, data#16.main.temp AS temperature#19, data#16.main.pressure AS pressure#20L, data#16.main.humidity AS humidity#21L, data#16.weather[0].description AS description#22]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.154094Z","level":"info","event":"                           +- Project [data#16]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.154148Z","level":"info","event":"                              +- Generate explode(list#0), false, [data#16]","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.154202Z","level":"info","event":"                                 +- Relation [list#0] json","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.154260Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T06:48:15.608088Z","level":"error","event":"\r[Stage 0:>                                                          (0 + 1) / 1]\r\r                                                                                \r\r[Stage 5:==>                                                     (8 + 12) / 200]\r\r[Stage 5:===>                                                   (11 + 13) / 200]\r\r[Stage 5:=====>                                                 (21 + 13) / 200]\r\r[Stage 5:=======>                                               (27 + 12) / 200]\r\r[Stage 5:===========>                                           (43 + 14) / 200]\r\r[Stage 5:==================>                                    (69 + 12) / 200]\r\r[Stage 5:=========================>                             (93 + 19) / 200]\r\r[Stage 5:==================================>                   (127 + 12) / 200]\r\r[Stage 5:===========================================>          (162 + 12) / 200]","chan":"stderr","logger":"task"}
