{"timestamp":"2025-08-31T19:07:05.132500","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-08-31T19:07:05.133269","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/main.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-08-31T19:07:05.578969Z","level":"error","event":"WARNING: Using incubator modules: jdk.incubator.vector","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:07.179134Z","level":"error","event":"25/08/31 19:07:07 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:07.418946Z","level":"error","event":"Using Spark's default log4j profile: org/apache/spark/log4j2-defaults.properties","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:07.419350Z","level":"error","event":"Setting default log level to \"WARN\".","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:07.419452Z","level":"error","event":"To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.160082Z","level":"error","event":"25/08/31 19:07:10 WARN SparkSession: Cannot use org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions to configure session extensions.","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.160349Z","level":"error","event":"java.lang.ClassNotFoundException: org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.160473Z","level":"error","event":"\tat java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:445)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.160555Z","level":"error","event":"\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:592)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.160659Z","level":"error","event":"\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.160809Z","level":"error","event":"\tat java.base/java.lang.Class.forName0(Native Method)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.160964Z","level":"error","event":"\tat java.base/java.lang.Class.forName(Class.java:467)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161112Z","level":"error","event":"\tat org.apache.spark.util.SparkClassUtils.classForName(SparkClassUtils.scala:41)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161194Z","level":"error","event":"\tat org.apache.spark.util.SparkClassUtils.classForName$(SparkClassUtils.scala:36)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161248Z","level":"error","event":"\tat org.apache.spark.util.Utils$.classForName(Utils.scala:99)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161309Z","level":"error","event":"\tat org.apache.spark.sql.classic.SparkSession$.$anonfun$applyExtensions$2(SparkSession.scala:1056)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161364Z","level":"error","event":"\tat org.apache.spark.sql.classic.SparkSession$.$anonfun$applyExtensions$2$adapted(SparkSession.scala:1054)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161417Z","level":"error","event":"\tat scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161518Z","level":"error","event":"\tat scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161618Z","level":"error","event":"\tat scala.collection.AbstractIterable.foreach(Iterable.scala:935)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161669Z","level":"error","event":"\tat org.apache.spark.sql.classic.SparkSession$.org$apache$spark$sql$classic$SparkSession$$applyExtensions(SparkSession.scala:1054)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161747Z","level":"error","event":"\tat org.apache.spark.sql.classic.SparkSession$.applyAndLoadExtensions(SparkSession.scala:1038)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161800Z","level":"error","event":"\tat org.apache.spark.sql.classic.SparkSession.<init>(SparkSession.scala:116)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161857Z","level":"error","event":"\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161910Z","level":"error","event":"\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.161978Z","level":"error","event":"\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.162028Z","level":"error","event":"\tat java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.162076Z","level":"error","event":"\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.162125Z","level":"error","event":"\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:247)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.162176Z","level":"error","event":"\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:374)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.162226Z","level":"error","event":"\tat py4j.Gateway.invoke(Gateway.java:238)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.162274Z","level":"error","event":"\tat py4j.commands.ConstructorCommand.invokeConstructor(ConstructorCommand.java:80)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.162337Z","level":"error","event":"\tat py4j.commands.ConstructorCommand.execute(ConstructorCommand.java:69)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.162405Z","level":"error","event":"\tat py4j.ClientServerConnection.waitForCommands(ClientServerConnection.java:184)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.162464Z","level":"error","event":"\tat py4j.ClientServerConnection.run(ClientServerConnection.java:108)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:10.162512Z","level":"error","event":"\tat java.base/java.lang.Thread.run(Thread.java:840)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.000069Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.000427Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.000504Z","level":"info","event":"Current task name:etl_data_weather.extract_transform_load","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.000563Z","level":"info","event":"Dag name:etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.000618Z","level":"info","event":"extract data from file","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.000690Z","level":"info","event":"spark.jars = /opt/spark/jars/hadoop-aws-3.3.6.jar,/opt/spark/jars/aws-java-sdk-bundle-1.12.787.jar,/opt/spark/jars/ojdbc11.jar,/opt/spark/jars/iceberg-spark-runtime-4.0_2.13-1.9.2.jar,/opt/spark/jars/iceberg-aws-bundle-1.9.2.jar","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.000749Z","level":"info","event":"spark.hadoop.fs.s3a.connection.part.upload.timeout = 60000","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.000822Z","level":"info","event":"spark.hadoop.fs.s3a.socket.recv.buffer = 65536","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.000891Z","level":"info","event":"spark.hadoop.fs.s3a.impl.disable.cache = true","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.000944Z","level":"info","event":"spark.hadoop.fs.s3a.connection.request.timeout = 60000","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.000996Z","level":"info","event":"spark.app.submitTime = 1756667227307","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001059Z","level":"info","event":"spark.hadoop.fs.s3a.path.style.access = true","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001125Z","level":"info","event":"spark.rdd.compress = True","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001180Z","level":"info","event":"spark.hadoop.fs.s3a.connection.idle.time = 60000","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001232Z","level":"info","event":"spark.sql.catalog.local = org.apache.iceberg.spark.SparkCatalog","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001285Z","level":"info","event":"spark.executor.extraClassPath = /opt/spark/jars/ojdbc11.jar","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001355Z","level":"info","event":"spark.hadoop.fs.s3a.connection.establish.timeout = 5000","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001409Z","level":"info","event":"spark.hadoop.fs.s3a.access.key = admin","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001458Z","level":"info","event":"spark.sql.catalog.local.type = hadoop","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001510Z","level":"info","event":"spark.hadoop.fs.s3a.endpoint = http://minio:9000","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001560Z","level":"info","event":"spark.hadoop.fs.s3a.retry.interval = 500","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001626Z","level":"info","event":"spark.hadoop.fs.s3a.connection.maximum = 15","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001685Z","level":"info","event":"spark.hadoop.fs.s3a.retry.limit = 5","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001737Z","level":"info","event":"spark.hadoop.fs.s3a.vectored.read.max.merged.size = 2097152","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001786Z","level":"info","event":"spark.sql.catalog.local.warehouse = s3a://warehouse/","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001835Z","level":"info","event":"spark.hadoop.fs.s3a.impl = org.apache.hadoop.fs.s3a.S3AFileSystem","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001885Z","level":"info","event":"spark.hadoop.fs.s3a.vectored.read.min.seek.size = 131072","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001935Z","level":"info","event":"spark.hadoop.fs.s3a.secret.key = admin12345","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.001988Z","level":"info","event":"spark.sql.adaptive.coalescePartitions.enabled = false","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.002040Z","level":"info","event":"spark.repl.local.jars = file:///opt/spark/jars/hadoop-aws-3.3.6.jar,file:///opt/spark/jars/aws-java-sdk-bundle-1.12.787.jar,file:///opt/spark/jars/ojdbc11.jar,file:///opt/spark/jars/iceberg-spark-runtime-4.0_2.13-1.9.2.jar,file:///opt/spark/jars/iceberg-aws-bundle-1.9.2.jar","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.002092Z","level":"info","event":"spark.hadoop.fs.s3a.socket.send.buffer = 65536","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.002143Z","level":"info","event":"spark.hadoop.fs.s3a.fast.upload = true","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.002198Z","level":"info","event":"spark.executor.extraJavaOptions = -Djava.net.preferIPv6Addresses=false -XX:+IgnoreUnrecognizedVMOptions --add-modules=jdk.incubator.vector --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens=java.base/jdk.internal.ref=ALL-UNNAMED --add-opens=java.base/sun.nio.ch=ALL-UNNAMED --add-opens=java.base/sun.nio.cs=ALL-UNNAMED --add-opens=java.base/sun.security.action=ALL-UNNAMED --add-opens=java.base/sun.util.calendar=ALL-UNNAMED --add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED -Djdk.reflect.useDirectMethodHandle=false -Dio.netty.tryReflectionSetAccessible=true","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.002263Z","level":"info","event":"spark.sql.artifact.isolation.enabled = false","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.002343Z","level":"info","event":"spark.hadoop.fs.s3a.multipart.size = 104857600","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.002486Z","level":"info","event":"spark.sql.extensions = org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.002648Z","level":"info","event":"spark.master = local[*]","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.002739Z","level":"info","event":"spark.executor.id = driver","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.002799Z","level":"info","event":"spark.driver.extraClassPath = /opt/spark/jars/ojdbc11.jar","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.002875Z","level":"info","event":"spark.app.name = BAITEST","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.002944Z","level":"info","event":"spark.driver.host = 0709b553a124","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.002999Z","level":"info","event":"spark.submit.deployMode = client","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003054Z","level":"info","event":"spark.hadoop.fs.s3a.connection.ssl.enabled = false","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003109Z","level":"info","event":"spark.driver.port = 44781","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003162Z","level":"info","event":"spark.serializer.objectStreamReset = 100","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003213Z","level":"info","event":"spark.ui.showConsoleProgress = true","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003263Z","level":"info","event":"spark.hadoop.fs.s3a.multipart.purge.age = 86400","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003332Z","level":"info","event":"spark.hadoop.fs.s3a.threads.max = 10","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003402Z","level":"info","event":"spark.app.startTime = 1756667227658","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003455Z","level":"info","event":"spark.hadoop.fs.s3a.aws.credentials.provider = org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003522Z","level":"info","event":"spark.submit.pyFiles =","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003657Z","level":"info","event":"spark.driver.extraJavaOptions = -Djava.net.preferIPv6Addresses=false -XX:+IgnoreUnrecognizedVMOptions --add-modules=jdk.incubator.vector --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.lang.invoke=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.util.concurrent=ALL-UNNAMED --add-opens=java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens=java.base/jdk.internal.ref=ALL-UNNAMED --add-opens=java.base/sun.nio.ch=ALL-UNNAMED --add-opens=java.base/sun.nio.cs=ALL-UNNAMED --add-opens=java.base/sun.security.action=ALL-UNNAMED --add-opens=java.base/sun.util.calendar=ALL-UNNAMED --add-opens=java.security.jgss/sun.security.krb5=ALL-UNNAMED -Djdk.reflect.useDirectMethodHandle=false -Dio.netty.tryReflectionSetAccessible=true","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003729Z","level":"info","event":"spark.hadoop.fs.s3a.attempts.maximum = 3","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003789Z","level":"info","event":"spark.app.id = local-1756667228622","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003842Z","level":"info","event":"spark.hadoop.fs.s3a.threads.keepalivetime = 60000","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003891Z","level":"info","event":"spark.sql.adaptive.enabled = false","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003938Z","level":"info","event":"spark.app.initial.jar.urls = spark://0709b553a124:44781/jars/aws-java-sdk-bundle-1.12.787.jar,spark://0709b553a124:44781/jars/iceberg-spark-runtime-4.0_2.13-1.9.2.jar,spark://0709b553a124:44781/jars/hadoop-aws-3.3.6.jar,spark://0709b553a124:44781/jars/ojdbc11.jar,spark://0709b553a124:44781/jars/iceberg-aws-bundle-1.9.2.jar","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.003985Z","level":"info","event":"spark.hadoop.fs.s3a.connection.timeout = 60000","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.724315Z","level":"error","event":"25/08/31 19:07:13 WARN MetricsConfig: Cannot locate configuration: tried hadoop-metrics2-s3a-file-system.properties,hadoop-metrics2.properties","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.822345Z","level":"error","event":"25/08/31 19:07:13 WARN VersionInfoUtils: The AWS SDK for Java 1.x entered maintenance mode starting July 31, 2024 and will reach end of support on December 31, 2025. For more information, see https://aws.amazon.com/blogs/developer/the-aws-sdk-for-java-1-x-is-in-maintenance-mode-effective-july-31-2024/","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.822574Z","level":"error","event":"You can print where on the file system the AWS SDK for Java 1.x core runtime is located by setting the AWS_JAVA_V1_PRINT_LOCATION environment variable or aws.java.v1.printLocation system property to 'true'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.822657Z","level":"error","event":"This message can be disabled by setting the AWS_JAVA_V1_DISABLE_DEPRECATION_ANNOUNCEMENT environment variable or aws.java.v1.disableDeprecationAnnouncement system property to 'true'.","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.822712Z","level":"error","event":"The AWS SDK for Java 1.x is being used here:","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.822763Z","level":"error","event":"at java.base/java.lang.Thread.getStackTrace(Thread.java:1619)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.822816Z","level":"error","event":"at com.amazonaws.util.VersionInfoUtils.printDeprecationAnnouncement(VersionInfoUtils.java:81)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.822865Z","level":"error","event":"at com.amazonaws.util.VersionInfoUtils.<clinit>(VersionInfoUtils.java:59)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.822914Z","level":"error","event":"at com.amazonaws.ClientConfiguration.<clinit>(ClientConfiguration.java:95)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.822961Z","level":"error","event":"at org.apache.hadoop.fs.s3a.S3AUtils.createAwsConf(S3AUtils.java:1251)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823007Z","level":"error","event":"at org.apache.hadoop.fs.s3a.DefaultS3ClientFactory.createS3Client(DefaultS3ClientFactory.java:118)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823053Z","level":"error","event":"at org.apache.hadoop.fs.s3a.S3AFileSystem.bindAWSClient(S3AFileSystem.java:982)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823113Z","level":"error","event":"at org.apache.hadoop.fs.s3a.S3AFileSystem.initialize(S3AFileSystem.java:586)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823160Z","level":"error","event":"at org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:3615)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823206Z","level":"error","event":"at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:554)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823252Z","level":"error","event":"at org.apache.hadoop.fs.Path.getFileSystem(Path.java:366)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823306Z","level":"error","event":"at org.apache.spark.sql.execution.streaming.FileStreamSink$.hasMetadata(FileStreamSink.scala:55)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823358Z","level":"error","event":"at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:381)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823405Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.ResolveDataSource.org$apache$spark$sql$catalyst$analysis$ResolveDataSource$$loadV1BatchSource(ResolveDataSource.scala:143)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823452Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.ResolveDataSource$$anonfun$apply$1.$anonfun$applyOrElse$2(ResolveDataSource.scala:61)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823498Z","level":"error","event":"at scala.Option.getOrElse(Option.scala:201)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823544Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.ResolveDataSource$$anonfun$apply$1.applyOrElse(ResolveDataSource.scala:61)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823588Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.ResolveDataSource$$anonfun$apply$1.applyOrElse(ResolveDataSource.scala:45)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823632Z","level":"error","event":"at org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsUpWithPruning$3(AnalysisHelper.scala:139)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823675Z","level":"error","event":"at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(origin.scala:86)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823718Z","level":"error","event":"at org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsUpWithPruning$1(AnalysisHelper.scala:139)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823762Z","level":"error","event":"at org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823805Z","level":"error","event":"at org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUpWithPruning(AnalysisHelper.scala:135)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823849Z","level":"error","event":"at org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUpWithPruning$(AnalysisHelper.scala:131)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823892Z","level":"error","event":"at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsUpWithPruning(LogicalPlan.scala:37)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823935Z","level":"error","event":"at org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUp(AnalysisHelper.scala:112)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.823978Z","level":"error","event":"at org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsUp$(AnalysisHelper.scala:111)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824029Z","level":"error","event":"at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsUp(LogicalPlan.scala:37)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824076Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.ResolveDataSource.apply(ResolveDataSource.scala:45)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824119Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.ResolveDataSource.apply(ResolveDataSource.scala:43)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824163Z","level":"error","event":"at org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$2(RuleExecutor.scala:242)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824208Z","level":"error","event":"at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824252Z","level":"error","event":"at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824295Z","level":"error","event":"at scala.collection.immutable.List.foldLeft(List.scala:79)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824357Z","level":"error","event":"at org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1(RuleExecutor.scala:239)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824479Z","level":"error","event":"at org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1$adapted(RuleExecutor.scala:231)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824543Z","level":"error","event":"at scala.collection.immutable.List.foreach(List.scala:334)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824589Z","level":"error","event":"at org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:231)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824633Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$executeSameContext(Analyzer.scala:290)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824677Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$execute$1(Analyzer.scala:286)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824721Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.AnalysisContext$.withNewAnalysisContext(Analyzer.scala:234)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824765Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:286)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824807Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:249)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824849Z","level":"error","event":"at org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$executeAndTrack$1(RuleExecutor.scala:201)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824892Z","level":"error","event":"at org.apache.spark.sql.catalyst.QueryPlanningTracker$.withTracker(QueryPlanningTracker.scala:89)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824935Z","level":"error","event":"at org.apache.spark.sql.catalyst.rules.RuleExecutor.executeAndTrack(RuleExecutor.scala:201)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.824979Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.resolveInFixedPoint(HybridAnalyzer.scala:190)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825021Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.$anonfun$apply$1(HybridAnalyzer.scala:76)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825071Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.withTrackedAnalyzerBridgeState(HybridAnalyzer.scala:111)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825115Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.apply(HybridAnalyzer.scala:71)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825157Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$executeAndCheck$1(Analyzer.scala:280)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825200Z","level":"error","event":"at org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.markInAnalyzer(AnalysisHelper.scala:423)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825244Z","level":"error","event":"at org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:280)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825305Z","level":"error","event":"at org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$2(QueryExecution.scala:110)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825365Z","level":"error","event":"at org.apache.spark.sql.catalyst.QueryPlanningTracker.measurePhase(QueryPlanningTracker.scala:148)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825415Z","level":"error","event":"at org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$2(QueryExecution.scala:278)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825461Z","level":"error","event":"at org.apache.spark.sql.execution.QueryExecution$.withInternalError(QueryExecution.scala:654)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825506Z","level":"error","event":"at org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$1(QueryExecution.scala:278)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825552Z","level":"error","event":"at org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825599Z","level":"error","event":"at org.apache.spark.sql.execution.QueryExecution.executePhase(QueryExecution.scala:277)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825644Z","level":"error","event":"at org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$1(QueryExecution.scala:110)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825689Z","level":"error","event":"at scala.util.Try$.apply(Try.scala:217)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825734Z","level":"error","event":"at org.apache.spark.util.Utils$.doTryWithCallerStacktrace(Utils.scala:1378)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825779Z","level":"error","event":"at org.apache.spark.util.LazyTry.tryT$lzycompute(LazyTry.scala:46)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825824Z","level":"error","event":"at org.apache.spark.util.LazyTry.tryT(LazyTry.scala:46)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825871Z","level":"error","event":"at org.apache.spark.util.LazyTry.get(LazyTry.scala:58)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825917Z","level":"error","event":"at org.apache.spark.sql.execution.QueryExecution.analyzed(QueryExecution.scala:121)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.825964Z","level":"error","event":"at org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:80)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826010Z","level":"error","event":"at org.apache.spark.sql.classic.Dataset$.$anonfun$ofRows$1(Dataset.scala:115)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826063Z","level":"error","event":"at org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826114Z","level":"error","event":"at org.apache.spark.sql.classic.Dataset$.ofRows(Dataset.scala:113)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826161Z","level":"error","event":"at org.apache.spark.sql.classic.DataFrameReader.load(DataFrameReader.scala:109)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826204Z","level":"error","event":"at org.apache.spark.sql.classic.DataFrameReader.load(DataFrameReader.scala:58)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826246Z","level":"error","event":"at org.apache.spark.sql.DataFrameReader.json(DataFrameReader.scala:296)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826335Z","level":"error","event":"at org.apache.spark.sql.classic.DataFrameReader.json(DataFrameReader.scala:150)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826481Z","level":"error","event":"at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826621Z","level":"error","event":"at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826700Z","level":"error","event":"at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826744Z","level":"error","event":"at java.base/java.lang.reflect.Method.invoke(Method.java:569)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826789Z","level":"error","event":"at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826832Z","level":"error","event":"at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:374)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826876Z","level":"error","event":"at py4j.Gateway.invoke(Gateway.java:282)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826924Z","level":"error","event":"at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.826975Z","level":"error","event":"at py4j.commands.CallCommand.execute(CallCommand.java:79)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.827092Z","level":"error","event":"at py4j.ClientServerConnection.waitForCommands(ClientServerConnection.java:184)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.827151Z","level":"error","event":"at py4j.ClientServerConnection.run(ClientServerConnection.java:108)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:13.827213Z","level":"error","event":"at java.base/java.lang.Thread.run(Thread.java:840)","chan":"stderr","logger":"task"}
{"timestamp":"2025-08-31T19:07:15.174968Z","level":"info","event":"spark data extracted","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:15.193980Z","level":"info","event":"root","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:15.194202Z","level":"info","event":" |-- list: array (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:15.194312Z","level":"info","event":" |    |-- element: struct (containsNull = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:15.194402Z","level":"info","event":" |    |    |-- dt: long (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:15.194490Z","level":"info","event":" |    |    |-- main: struct (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:15.194572Z","level":"info","event":" |    |    |    |-- temp: double (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:15.194660Z","level":"info","event":" |    |    |    |-- pressure: long (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:15.194772Z","level":"info","event":" |    |    |    |-- humidity: long (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:15.194859Z","level":"info","event":" |    |    |-- weather: array (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:15.194935Z","level":"info","event":" |    |    |    |-- element: struct (containsNull = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:15.195018Z","level":"info","event":" |    |    |    |    |-- description: string (nullable = true)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:15.195106Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:17.695911Z","level":"info","event":"+--------------------+","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:17.696220Z","level":"info","event":"|                list|","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:17.696380Z","level":"info","event":"+--------------------+","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:17.696547Z","level":"info","event":"|[{1752192000, {26...|","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:17.697114Z","level":"info","event":"+--------------------+","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:17.697252Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.448591Z","level":"info","event":"+----------+-----------+--------+--------+-----------+","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.448937Z","level":"info","event":"|        dt|temperature|pressure|humidity|description|","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.449072Z","level":"info","event":"+----------+-----------+--------+--------+-----------+","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.449179Z","level":"info","event":"|1752192000|      26.72|     998|      89|    mưa vừa|","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.449279Z","level":"info","event":"|1752202800|      27.27|     999|      81|    mưa nhẹ|","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.449410Z","level":"info","event":"|1752213600|      30.07|     999|      67|    mưa vừa|","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.449513Z","level":"info","event":"|1752224400|      29.96|     998|      75|    mưa vừa|","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.449625Z","level":"info","event":"|1752235200|      26.19|    1000|      91|    mưa vừa|","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.449725Z","level":"info","event":"+----------+-----------+--------+--------+-----------+","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.449828Z","level":"info","event":"only showing top 5 rows","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.449952Z","level":"info","event":"spark data selected","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.450072Z","level":"info","event":"transform data","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.727240Z","level":"info","event":"load data","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.727568Z","level":"info","event":"(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=orcl-21c)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=WEATHER)))","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:19.891864Z","level":"info","event":"Table `WEATHER` created successfully.","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.199872Z","level":"info","event":"An error occurred while calling o99.sql.","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.200188Z","level":"info","event":": org.apache.spark.SparkException: Cannot find catalog plugin class for catalog 'local': org.apache.iceberg.spark.SparkCatalog.","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.200364Z","level":"info","event":"\tat org.apache.spark.sql.errors.QueryExecutionErrors$.catalogPluginClassNotFoundForCatalogError(QueryExecutionErrors.scala:1830)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.200483Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.Catalogs$.load(Catalogs.scala:70)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.200592Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.CatalogManager.$anonfun$catalog$1(CatalogManager.scala:56)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.200696Z","level":"info","event":"\tat scala.collection.mutable.HashMap.getOrElseUpdate(HashMap.scala:469)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.200793Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.CatalogManager.catalog(CatalogManager.scala:56)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.200887Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.LookupCatalog$CatalogAndNamespace$.unapply(LookupCatalog.scala:86)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.200979Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:92)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.201074Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:38)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.201170Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$2(AnalysisHelper.scala:200)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.201267Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(origin.scala:86)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.201381Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:200)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.201477Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.201670Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.201959Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.202091Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.202262Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$4(AnalysisHelper.scala:205)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.202403Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren(TreeNode.scala:1231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.202510Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren$(TreeNode.scala:1230)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.202609Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.CreateNamespace.mapChildren(v2Commands.scala:595)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.202712Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:205)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.202825Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.202915Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.203001Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.203100Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.203196Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown(AnalysisHelper.scala:190)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.203294Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown$(AnalysisHelper.scala:189)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.203404Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDown(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.203500Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:38)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.203607Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:35)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.203706Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$2(RuleExecutor.scala:242)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.203809Z","level":"info","event":"\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.203916Z","level":"info","event":"\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.204018Z","level":"info","event":"\tat scala.collection.immutable.List.foldLeft(List.scala:79)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.204121Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1(RuleExecutor.scala:239)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.204226Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1$adapted(RuleExecutor.scala:231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.204346Z","level":"info","event":"\tat scala.collection.immutable.List.foreach(List.scala:334)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.204930Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.205069Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$executeSameContext(Analyzer.scala:290)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.205288Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$execute$1(Analyzer.scala:286)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.205438Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.AnalysisContext$.withNewAnalysisContext(Analyzer.scala:234)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.205567Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:286)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.205677Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:249)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.205777Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$executeAndTrack$1(RuleExecutor.scala:201)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.205875Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.QueryPlanningTracker$.withTracker(QueryPlanningTracker.scala:89)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.205968Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.executeAndTrack(RuleExecutor.scala:201)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.206057Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.resolveInFixedPoint(HybridAnalyzer.scala:190)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.206153Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.$anonfun$apply$1(HybridAnalyzer.scala:76)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.206243Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.withTrackedAnalyzerBridgeState(HybridAnalyzer.scala:111)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.206349Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.apply(HybridAnalyzer.scala:71)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.206441Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$executeAndCheck$1(Analyzer.scala:280)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.206534Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.markInAnalyzer(AnalysisHelper.scala:423)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.206635Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:280)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.206733Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$2(QueryExecution.scala:110)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.206831Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.QueryPlanningTracker.measurePhase(QueryPlanningTracker.scala:148)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.206925Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$2(QueryExecution.scala:278)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.207029Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution$.withInternalError(QueryExecution.scala:654)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.207123Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$1(QueryExecution.scala:278)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.207221Z","level":"info","event":"\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.207397Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.executePhase(QueryExecution.scala:277)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.207513Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$1(QueryExecution.scala:110)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.207617Z","level":"info","event":"\tat scala.util.Try$.apply(Try.scala:217)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.207736Z","level":"info","event":"\tat org.apache.spark.util.Utils$.doTryWithCallerStacktrace(Utils.scala:1378)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.207841Z","level":"info","event":"\tat org.apache.spark.util.Utils$.getTryWithCallerStacktrace(Utils.scala:1439)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.207944Z","level":"info","event":"\tat org.apache.spark.util.LazyTry.get(LazyTry.scala:58)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.208047Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.analyzed(QueryExecution.scala:121)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.208152Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:80)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.208253Z","level":"info","event":"\tat org.apache.spark.sql.classic.Dataset$.$anonfun$ofRows$5(Dataset.scala:139)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.208365Z","level":"info","event":"\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.208658Z","level":"info","event":"\tat org.apache.spark.sql.classic.Dataset$.ofRows(Dataset.scala:136)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.208928Z","level":"info","event":"\tat org.apache.spark.sql.classic.SparkSession.$anonfun$sql$1(SparkSession.scala:462)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.209049Z","level":"info","event":"\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.209152Z","level":"info","event":"\tat org.apache.spark.sql.classic.SparkSession.sql(SparkSession.scala:449)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.209239Z","level":"info","event":"\tat org.apache.spark.sql.classic.SparkSession.sql(SparkSession.scala:467)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.209350Z","level":"info","event":"\tat org.apache.spark.sql.classic.SparkSession.sql(SparkSession.scala:91)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.209547Z","level":"info","event":"\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.209832Z","level":"info","event":"\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.209987Z","level":"info","event":"\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.210095Z","level":"info","event":"\tat java.base/java.lang.reflect.Method.invoke(Method.java:569)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.210195Z","level":"info","event":"\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.210304Z","level":"info","event":"\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:374)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.210408Z","level":"info","event":"\tat py4j.Gateway.invoke(Gateway.java:282)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.210498Z","level":"info","event":"\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.210590Z","level":"info","event":"\tat py4j.commands.CallCommand.execute(CallCommand.java:79)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.210679Z","level":"info","event":"\tat py4j.ClientServerConnection.waitForCommands(ClientServerConnection.java:184)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.210789Z","level":"info","event":"\tat py4j.ClientServerConnection.run(ClientServerConnection.java:108)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.210890Z","level":"info","event":"\tat java.base/java.lang.Thread.run(Thread.java:840)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.211106Z","level":"info","event":"\tSuppressed: org.apache.spark.util.Utils$OriginalTryStackTraceException: Full stacktrace of original doTryWithCallerStacktrace caller","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.211215Z","level":"info","event":"\t\tat org.apache.spark.sql.errors.QueryExecutionErrors$.catalogPluginClassNotFoundForCatalogError(QueryExecutionErrors.scala:1830)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.211326Z","level":"info","event":"\t\tat org.apache.spark.sql.connector.catalog.Catalogs$.load(Catalogs.scala:70)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.211423Z","level":"info","event":"\t\tat org.apache.spark.sql.connector.catalog.CatalogManager.$anonfun$catalog$1(CatalogManager.scala:56)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.211522Z","level":"info","event":"\t\tat scala.collection.mutable.HashMap.getOrElseUpdate(HashMap.scala:469)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.211620Z","level":"info","event":"\t\tat org.apache.spark.sql.connector.catalog.CatalogManager.catalog(CatalogManager.scala:56)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.211718Z","level":"info","event":"\t\tat org.apache.spark.sql.connector.catalog.LookupCatalog$CatalogAndNamespace$.unapply(LookupCatalog.scala:86)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.211815Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:92)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.211918Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:38)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.212030Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$2(AnalysisHelper.scala:200)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.212166Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(origin.scala:86)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.212482Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:200)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.212586Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.212693Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.212793Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.212894Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.212993Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$4(AnalysisHelper.scala:205)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.213117Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren(TreeNode.scala:1231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.213220Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren$(TreeNode.scala:1230)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.213336Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.CreateNamespace.mapChildren(v2Commands.scala:595)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.213439Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:205)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.213542Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.213644Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.213743Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.213848Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.213954Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown(AnalysisHelper.scala:190)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.214057Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown$(AnalysisHelper.scala:189)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.214156Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDown(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.214258Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:38)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.214372Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:35)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.214470Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$2(RuleExecutor.scala:242)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.214565Z","level":"info","event":"\t\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.214663Z","level":"info","event":"\t\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.214757Z","level":"info","event":"\t\tat scala.collection.immutable.List.foldLeft(List.scala:79)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.214861Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1(RuleExecutor.scala:239)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.214958Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1$adapted(RuleExecutor.scala:231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.215060Z","level":"info","event":"\t\tat scala.collection.immutable.List.foreach(List.scala:334)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.215157Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.215267Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$executeSameContext(Analyzer.scala:290)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.215663Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$execute$1(Analyzer.scala:286)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.215770Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.AnalysisContext$.withNewAnalysisContext(Analyzer.scala:234)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.215866Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:286)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.215959Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:249)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.216062Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$executeAndTrack$1(RuleExecutor.scala:201)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.216167Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.QueryPlanningTracker$.withTracker(QueryPlanningTracker.scala:89)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.216260Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.executeAndTrack(RuleExecutor.scala:201)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.216368Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.resolveInFixedPoint(HybridAnalyzer.scala:190)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.216553Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.$anonfun$apply$1(HybridAnalyzer.scala:76)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.216784Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.withTrackedAnalyzerBridgeState(HybridAnalyzer.scala:111)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.216875Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.apply(HybridAnalyzer.scala:71)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.216963Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$executeAndCheck$1(Analyzer.scala:280)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.217167Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.markInAnalyzer(AnalysisHelper.scala:423)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.217263Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:280)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.217367Z","level":"info","event":"\t\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$2(QueryExecution.scala:110)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.217457Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.QueryPlanningTracker.measurePhase(QueryPlanningTracker.scala:148)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.217547Z","level":"info","event":"\t\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$2(QueryExecution.scala:278)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.217637Z","level":"info","event":"\t\tat org.apache.spark.sql.execution.QueryExecution$.withInternalError(QueryExecution.scala:654)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.217719Z","level":"info","event":"\t\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$1(QueryExecution.scala:278)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.217833Z","level":"info","event":"\t\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.217930Z","level":"info","event":"\t\tat org.apache.spark.sql.execution.QueryExecution.executePhase(QueryExecution.scala:277)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.218020Z","level":"info","event":"\t\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$1(QueryExecution.scala:110)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.218109Z","level":"info","event":"\t\tat scala.util.Try$.apply(Try.scala:217)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.218197Z","level":"info","event":"\t\tat org.apache.spark.util.Utils$.doTryWithCallerStacktrace(Utils.scala:1378)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.218286Z","level":"info","event":"\t\tat org.apache.spark.util.LazyTry.tryT$lzycompute(LazyTry.scala:46)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.218387Z","level":"info","event":"\t\tat org.apache.spark.util.LazyTry.tryT(LazyTry.scala:46)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.218478Z","level":"info","event":"\t\t... 23 more","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.218571Z","level":"info","event":"Caused by: java.lang.ClassNotFoundException: org.apache.iceberg.spark.SparkCatalog","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.218658Z","level":"info","event":"\tat java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:445)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.218748Z","level":"info","event":"\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:592)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.218840Z","level":"info","event":"\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.218936Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.Catalogs$.load(Catalogs.scala:60)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.219025Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.CatalogManager.$anonfun$catalog$1(CatalogManager.scala:56)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.219117Z","level":"info","event":"\tat scala.collection.mutable.HashMap.getOrElseUpdate(HashMap.scala:469)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.219402Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.CatalogManager.catalog(CatalogManager.scala:56)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.219559Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.LookupCatalog$CatalogAndNamespace$.unapply(LookupCatalog.scala:86)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.219649Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:92)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.219739Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:38)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.219835Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$2(AnalysisHelper.scala:200)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.219934Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(origin.scala:86)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.220027Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:200)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.220145Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.220247Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.220358Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.220551Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.220659Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$4(AnalysisHelper.scala:205)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.220765Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren(TreeNode.scala:1231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.220859Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren$(TreeNode.scala:1230)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.220953Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.CreateNamespace.mapChildren(v2Commands.scala:595)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.221045Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:205)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.221136Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.221230Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.221341Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.221442Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.221535Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown(AnalysisHelper.scala:190)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.221630Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown$(AnalysisHelper.scala:189)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.221730Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDown(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.221822Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:38)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.221915Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:35)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.222002Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$2(RuleExecutor.scala:242)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.222102Z","level":"info","event":"\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.222190Z","level":"info","event":"\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.222276Z","level":"info","event":"\tat scala.collection.immutable.List.foldLeft(List.scala:79)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.222383Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1(RuleExecutor.scala:239)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.222482Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1$adapted(RuleExecutor.scala:231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.222576Z","level":"info","event":"\tat scala.collection.immutable.List.foreach(List.scala:334)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.222668Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.222765Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$executeSameContext(Analyzer.scala:290)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.222855Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$execute$1(Analyzer.scala:286)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.222942Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.AnalysisContext$.withNewAnalysisContext(Analyzer.scala:234)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.223030Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:286)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.223109Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:249)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.223190Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$executeAndTrack$1(RuleExecutor.scala:201)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.223272Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.QueryPlanningTracker$.withTracker(QueryPlanningTracker.scala:89)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.223363Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.executeAndTrack(RuleExecutor.scala:201)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.223598Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.resolveInFixedPoint(HybridAnalyzer.scala:190)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.223834Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.$anonfun$apply$1(HybridAnalyzer.scala:76)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.223930Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.withTrackedAnalyzerBridgeState(HybridAnalyzer.scala:111)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.224014Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.apply(HybridAnalyzer.scala:71)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.224130Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$executeAndCheck$1(Analyzer.scala:280)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.224306Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.markInAnalyzer(AnalysisHelper.scala:423)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.224404Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:280)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.224484Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$2(QueryExecution.scala:110)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.224565Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.QueryPlanningTracker.measurePhase(QueryPlanningTracker.scala:148)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.224655Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$2(QueryExecution.scala:278)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.224841Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution$.withInternalError(QueryExecution.scala:654)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.224951Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$1(QueryExecution.scala:278)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.225045Z","level":"info","event":"\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.225140Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.executePhase(QueryExecution.scala:277)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.225243Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$1(QueryExecution.scala:110)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.225356Z","level":"info","event":"\tat scala.util.Try$.apply(Try.scala:217)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.225454Z","level":"info","event":"\tat org.apache.spark.util.Utils$.doTryWithCallerStacktrace(Utils.scala:1378)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.225531Z","level":"info","event":"\tat org.apache.spark.util.LazyTry.tryT$lzycompute(LazyTry.scala:46)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.225620Z","level":"info","event":"\tat org.apache.spark.util.LazyTry.tryT(LazyTry.scala:46)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.225715Z","level":"info","event":"\t... 23 more","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.225807Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.555702Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.512945","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"Py4JJavaError","exc_value":"An error occurred while calling o99.sql.\n: org.apache.spark.SparkException: Cannot find catalog plugin class for catalog 'local': org.apache.iceberg.spark.SparkCatalog.\n\tat org.apache.spark.sql.errors.QueryExecutionErrors$.catalogPluginClassNotFoundForCatalogError(QueryExecutionErrors.scala:1830)\n\tat org.apache.spark.sql.connector.catalog.Catalogs$.load(Catalogs.scala:70)\n\tat org.apache.spark.sql.connector.catalog.CatalogManager.$anonfun$catalog$1(CatalogManager.scala:56)\n\tat scala.collection.mutable.HashMap.getOrElseUpdate(HashMap.scala:469)\n\tat org.apache.spark.sql.connector.catalog.CatalogManager.catalog(CatalogManager.scala:56)\n\tat org.apache.spark.sql.connector.catalog.LookupCatalog$CatalogAndNamespace$.unapply(LookupCatalog.scala:86)\n\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:92)\n\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:38)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$2(AnalysisHelper.scala:200)\n\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(origin.scala:86)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:200)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$4(AnalysisHelper.scala:205)\n\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren(TreeNode.scala:1231)\n\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren$(TreeNode.scala:1230)\n\tat org.apache.spark.sql.catalyst.plans.logical.CreateNamespace.mapChildren(v2Commands.scala:595)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:205)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown(AnalysisHelper.scala:190)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown$(AnalysisHelper.scala:189)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDown(LogicalPlan.scala:37)\n\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:38)\n\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:35)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$2(RuleExecutor.scala:242)\n\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)\n\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)\n\tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1(RuleExecutor.scala:239)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1$adapted(RuleExecutor.scala:231)\n\tat scala.collection.immutable.List.foreach(List.scala:334)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:231)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$executeSameContext(Analyzer.scala:290)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$execute$1(Analyzer.scala:286)\n\tat org.apache.spark.sql.catalyst.analysis.AnalysisContext$.withNewAnalysisContext(Analyzer.scala:234)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:286)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:249)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$executeAndTrack$1(RuleExecutor.scala:201)\n\tat org.apache.spark.sql.catalyst.QueryPlanningTracker$.withTracker(QueryPlanningTracker.scala:89)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.executeAndTrack(RuleExecutor.scala:201)\n\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.resolveInFixedPoint(HybridAnalyzer.scala:190)\n\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.$anonfun$apply$1(HybridAnalyzer.scala:76)\n\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.withTrackedAnalyzerBridgeState(HybridAnalyzer.scala:111)\n\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.apply(HybridAnalyzer.scala:71)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$executeAndCheck$1(Analyzer.scala:280)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.markInAnalyzer(AnalysisHelper.scala:423)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:280)\n\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$2(QueryExecution.scala:110)\n\tat org.apache.spark.sql.catalyst.QueryPlanningTracker.measurePhase(QueryPlanningTracker.scala:148)\n\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$2(QueryExecution.scala:278)\n\tat org.apache.spark.sql.execution.QueryExecution$.withInternalError(QueryExecution.scala:654)\n\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$1(QueryExecution.scala:278)\n\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)\n\tat org.apache.spark.sql.execution.QueryExecution.executePhase(QueryExecution.scala:277)\n\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$1(QueryExecution.scala:110)\n\tat scala.util.Try$.apply(Try.scala:217)\n\tat org.apache.spark.util.Utils$.doTryWithCallerStacktrace(Utils.scala:1378)\n\tat org.apache.spark.util.Utils$.getTryWithCallerStacktrace(Utils.scala:1439)\n\tat org.apache.spark.util.LazyTry.get(LazyTry.scala:58)\n\tat org.apache.spark.sql.execution.QueryExecution.analyzed(QueryExecution.scala:121)\n\tat org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:80)\n\tat org.apache.spark.sql.classic.Dataset$.$anonfun$ofRows$5(Dataset.scala:139)\n\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)\n\tat org.apache.spark.sql.classic.Dataset$.ofRows(Dataset.scala:136)\n\tat org.apache.spark.sql.classic.SparkSession.$anonfun$sql$1(SparkSession.scala:462)\n\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)\n\tat org.apache.spark.sql.classic.SparkSession.sql(SparkSession.scala:449)\n\tat org.apache.spark.sql.classic.SparkSession.sql(SparkSession.scala:467)\n\tat org.apache.spark.sql.classic.SparkSession.sql(SparkSession.scala:91)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:569)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:374)\n\tat py4j.Gateway.invoke(Gateway.java:282)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.ClientServerConnection.waitForCommands(ClientServerConnection.java:184)\n\tat py4j.ClientServerConnection.run(ClientServerConnection.java:108)\n\tat java.base/java.lang.Thread.run(Thread.java:840)\n\tSuppressed: org.apache.spark.util.Utils$OriginalTryStackTraceException: Full stacktrace of original doTryWithCallerStacktrace caller\n\t\tat org.apache.spark.sql.errors.QueryExecutionErrors$.catalogPluginClassNotFoundForCatalogError(QueryExecutionErrors.scala:1830)\n\t\tat org.apache.spark.sql.connector.catalog.Catalogs$.load(Catalogs.scala:70)\n\t\tat org.apache.spark.sql.connector.catalog.CatalogManager.$anonfun$catalog$1(CatalogManager.scala:56)\n\t\tat scala.collection.mutable.HashMap.getOrElseUpdate(HashMap.scala:469)\n\t\tat org.apache.spark.sql.connector.catalog.CatalogManager.catalog(CatalogManager.scala:56)\n\t\tat org.apache.spark.sql.connector.catalog.LookupCatalog$CatalogAndNamespace$.unapply(LookupCatalog.scala:86)\n\t\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:92)\n\t\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:38)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$2(AnalysisHelper.scala:200)\n\t\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(origin.scala:86)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:200)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$4(AnalysisHelper.scala:205)\n\t\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren(TreeNode.scala:1231)\n\t\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren$(TreeNode.scala:1230)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.CreateNamespace.mapChildren(v2Commands.scala:595)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:205)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown(AnalysisHelper.scala:190)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown$(AnalysisHelper.scala:189)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDown(LogicalPlan.scala:37)\n\t\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:38)\n\t\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:35)\n\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$2(RuleExecutor.scala:242)\n\t\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)\n\t\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)\n\t\tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1(RuleExecutor.scala:239)\n\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1$adapted(RuleExecutor.scala:231)\n\t\tat scala.collection.immutable.List.foreach(List.scala:334)\n\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:231)\n\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$executeSameContext(Analyzer.scala:290)\n\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$execute$1(Analyzer.scala:286)\n\t\tat org.apache.spark.sql.catalyst.analysis.AnalysisContext$.withNewAnalysisContext(Analyzer.scala:234)\n\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:286)\n\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:249)\n\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$executeAndTrack$1(RuleExecutor.scala:201)\n\t\tat org.apache.spark.sql.catalyst.QueryPlanningTracker$.withTracker(QueryPlanningTracker.scala:89)\n\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.executeAndTrack(RuleExecutor.scala:201)\n\t\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.resolveInFixedPoint(HybridAnalyzer.scala:190)\n\t\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.$anonfun$apply$1(HybridAnalyzer.scala:76)\n\t\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.withTrackedAnalyzerBridgeState(HybridAnalyzer.scala:111)\n\t\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.apply(HybridAnalyzer.scala:71)\n\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$executeAndCheck$1(Analyzer.scala:280)\n\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.markInAnalyzer(AnalysisHelper.scala:423)\n\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:280)\n\t\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$2(QueryExecution.scala:110)\n\t\tat org.apache.spark.sql.catalyst.QueryPlanningTracker.measurePhase(QueryPlanningTracker.scala:148)\n\t\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$2(QueryExecution.scala:278)\n\t\tat org.apache.spark.sql.execution.QueryExecution$.withInternalError(QueryExecution.scala:654)\n\t\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$1(QueryExecution.scala:278)\n\t\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)\n\t\tat org.apache.spark.sql.execution.QueryExecution.executePhase(QueryExecution.scala:277)\n\t\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$1(QueryExecution.scala:110)\n\t\tat scala.util.Try$.apply(Try.scala:217)\n\t\tat org.apache.spark.util.Utils$.doTryWithCallerStacktrace(Utils.scala:1378)\n\t\tat org.apache.spark.util.LazyTry.tryT$lzycompute(LazyTry.scala:46)\n\t\tat org.apache.spark.util.LazyTry.tryT(LazyTry.scala:46)\n\t\t... 23 more\nCaused by: java.lang.ClassNotFoundException: org.apache.iceberg.spark.SparkCatalog\n\tat java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:445)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:592)\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)\n\tat org.apache.spark.sql.connector.catalog.Catalogs$.load(Catalogs.scala:60)\n\tat org.apache.spark.sql.connector.catalog.CatalogManager.$anonfun$catalog$1(CatalogManager.scala:56)\n\tat scala.collection.mutable.HashMap.getOrElseUpdate(HashMap.scala:469)\n\tat org.apache.spark.sql.connector.catalog.CatalogManager.catalog(CatalogManager.scala:56)\n\tat org.apache.spark.sql.connector.catalog.LookupCatalog$CatalogAndNamespace$.unapply(LookupCatalog.scala:86)\n\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:92)\n\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:38)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$2(AnalysisHelper.scala:200)\n\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(origin.scala:86)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:200)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$4(AnalysisHelper.scala:205)\n\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren(TreeNode.scala:1231)\n\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren$(TreeNode.scala:1230)\n\tat org.apache.spark.sql.catalyst.plans.logical.CreateNamespace.mapChildren(v2Commands.scala:595)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:205)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown(AnalysisHelper.scala:190)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown$(AnalysisHelper.scala:189)\n\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDown(LogicalPlan.scala:37)\n\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:38)\n\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:35)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$2(RuleExecutor.scala:242)\n\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)\n\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)\n\tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1(RuleExecutor.scala:239)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1$adapted(RuleExecutor.scala:231)\n\tat scala.collection.immutable.List.foreach(List.scala:334)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:231)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$executeSameContext(Analyzer.scala:290)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$execute$1(Analyzer.scala:286)\n\tat org.apache.spark.sql.catalyst.analysis.AnalysisContext$.withNewAnalysisContext(Analyzer.scala:234)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:286)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:249)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$executeAndTrack$1(RuleExecutor.scala:201)\n\tat org.apache.spark.sql.catalyst.QueryPlanningTracker$.withTracker(QueryPlanningTracker.scala:89)\n\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.executeAndTrack(RuleExecutor.scala:201)\n\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.resolveInFixedPoint(HybridAnalyzer.scala:190)\n\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.$anonfun$apply$1(HybridAnalyzer.scala:76)\n\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.withTrackedAnalyzerBridgeState(HybridAnalyzer.scala:111)\n\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.apply(HybridAnalyzer.scala:71)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$executeAndCheck$1(Analyzer.scala:280)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.markInAnalyzer(AnalysisHelper.scala:423)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:280)\n\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$2(QueryExecution.scala:110)\n\tat org.apache.spark.sql.catalyst.QueryPlanningTracker.measurePhase(QueryPlanningTracker.scala:148)\n\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$2(QueryExecution.scala:278)\n\tat org.apache.spark.sql.execution.QueryExecution$.withInternalError(QueryExecution.scala:654)\n\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$1(QueryExecution.scala:278)\n\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)\n\tat org.apache.spark.sql.execution.QueryExecution.executePhase(QueryExecution.scala:277)\n\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$1(QueryExecution.scala:110)\n\tat scala.util.Try$.apply(Try.scala:217)\n\tat org.apache.spark.util.Utils$.doTryWithCallerStacktrace(Utils.scala:1378)\n\tat org.apache.spark.util.LazyTry.tryT$lzycompute(LazyTry.scala:46)\n\tat org.apache.spark.util.LazyTry.tryT(LazyTry.scala:46)\n\t... 23 more\n","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":825,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1088,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":408,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":212,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":235,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/main.py","lineno":24,"name":"run_etl_weather"},{"filename":"/opt/airflow/dags/etl_data_weather.py","lineno":88,"name":"load_data_weather"},{"filename":"/opt/airflow/dags/spark/build_spark.py","lineno":86,"name":"write_spark_iceberg"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pyspark/sql/session.py","lineno":1810,"name":"sql"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/py4j/java_gateway.py","lineno":1362,"name":"__call__"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/pyspark/errors/exceptions/captured.py","lineno":282,"name":"deco"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/py4j/protocol.py","lineno":327,"name":"get_return_value"}]}]}
{"timestamp":"2025-08-31T19:07:25.557448Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.557742Z","level":"info","event":"Task:<Task(PythonOperator): etl_data_weather.extract_transform_load>","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.597791Z","level":"info","event":"Failure caused by An error occurred while calling o99.sql.","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.598261Z","level":"info","event":": org.apache.spark.SparkException: Cannot find catalog plugin class for catalog 'local': org.apache.iceberg.spark.SparkCatalog.","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.598383Z","level":"info","event":"\tat org.apache.spark.sql.errors.QueryExecutionErrors$.catalogPluginClassNotFoundForCatalogError(QueryExecutionErrors.scala:1830)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.598451Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.Catalogs$.load(Catalogs.scala:70)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.598510Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.CatalogManager.$anonfun$catalog$1(CatalogManager.scala:56)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.598590Z","level":"info","event":"\tat scala.collection.mutable.HashMap.getOrElseUpdate(HashMap.scala:469)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.598664Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.CatalogManager.catalog(CatalogManager.scala:56)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.598742Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.LookupCatalog$CatalogAndNamespace$.unapply(LookupCatalog.scala:86)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.598836Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:92)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.598932Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:38)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.599014Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$2(AnalysisHelper.scala:200)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.599102Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(origin.scala:86)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.599159Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:200)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.599213Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.599266Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.599339Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.599402Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.599485Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$4(AnalysisHelper.scala:205)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.599567Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren(TreeNode.scala:1231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.599655Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren$(TreeNode.scala:1230)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.599745Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.CreateNamespace.mapChildren(v2Commands.scala:595)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.599844Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:205)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.599939Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.600032Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.600131Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.600221Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.600314Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown(AnalysisHelper.scala:190)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.600517Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown$(AnalysisHelper.scala:189)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.600726Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDown(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.600788Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:38)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.600863Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:35)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.600916Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$2(RuleExecutor.scala:242)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.600966Z","level":"info","event":"\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601027Z","level":"info","event":"\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601100Z","level":"info","event":"\tat scala.collection.immutable.List.foldLeft(List.scala:79)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601155Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1(RuleExecutor.scala:239)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601205Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1$adapted(RuleExecutor.scala:231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601254Z","level":"info","event":"\tat scala.collection.immutable.List.foreach(List.scala:334)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601314Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601457Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$executeSameContext(Analyzer.scala:290)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601521Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$execute$1(Analyzer.scala:286)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601580Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.AnalysisContext$.withNewAnalysisContext(Analyzer.scala:234)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601632Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:286)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601682Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:249)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601731Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$executeAndTrack$1(RuleExecutor.scala:201)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601779Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.QueryPlanningTracker$.withTracker(QueryPlanningTracker.scala:89)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601827Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.executeAndTrack(RuleExecutor.scala:201)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601876Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.resolveInFixedPoint(HybridAnalyzer.scala:190)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601925Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.$anonfun$apply$1(HybridAnalyzer.scala:76)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.601973Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.withTrackedAnalyzerBridgeState(HybridAnalyzer.scala:111)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602023Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.apply(HybridAnalyzer.scala:71)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602081Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$executeAndCheck$1(Analyzer.scala:280)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602130Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.markInAnalyzer(AnalysisHelper.scala:423)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602178Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:280)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602226Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$2(QueryExecution.scala:110)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602274Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.QueryPlanningTracker.measurePhase(QueryPlanningTracker.scala:148)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602336Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$2(QueryExecution.scala:278)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602385Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution$.withInternalError(QueryExecution.scala:654)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602433Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$1(QueryExecution.scala:278)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602480Z","level":"info","event":"\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602528Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.executePhase(QueryExecution.scala:277)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602577Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$1(QueryExecution.scala:110)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602625Z","level":"info","event":"\tat scala.util.Try$.apply(Try.scala:217)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602675Z","level":"info","event":"\tat org.apache.spark.util.Utils$.doTryWithCallerStacktrace(Utils.scala:1378)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602723Z","level":"info","event":"\tat org.apache.spark.util.Utils$.getTryWithCallerStacktrace(Utils.scala:1439)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602772Z","level":"info","event":"\tat org.apache.spark.util.LazyTry.get(LazyTry.scala:58)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602823Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.analyzed(QueryExecution.scala:121)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602871Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:80)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602918Z","level":"info","event":"\tat org.apache.spark.sql.classic.Dataset$.$anonfun$ofRows$5(Dataset.scala:139)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.602967Z","level":"info","event":"\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603015Z","level":"info","event":"\tat org.apache.spark.sql.classic.Dataset$.ofRows(Dataset.scala:136)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603063Z","level":"info","event":"\tat org.apache.spark.sql.classic.SparkSession.$anonfun$sql$1(SparkSession.scala:462)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603125Z","level":"info","event":"\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603204Z","level":"info","event":"\tat org.apache.spark.sql.classic.SparkSession.sql(SparkSession.scala:449)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603256Z","level":"info","event":"\tat org.apache.spark.sql.classic.SparkSession.sql(SparkSession.scala:467)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603317Z","level":"info","event":"\tat org.apache.spark.sql.classic.SparkSession.sql(SparkSession.scala:91)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603369Z","level":"info","event":"\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603427Z","level":"info","event":"\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603475Z","level":"info","event":"\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603529Z","level":"info","event":"\tat java.base/java.lang.reflect.Method.invoke(Method.java:569)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603576Z","level":"info","event":"\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603624Z","level":"info","event":"\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:374)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603677Z","level":"info","event":"\tat py4j.Gateway.invoke(Gateway.java:282)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603727Z","level":"info","event":"\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603774Z","level":"info","event":"\tat py4j.commands.CallCommand.execute(CallCommand.java:79)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603822Z","level":"info","event":"\tat py4j.ClientServerConnection.waitForCommands(ClientServerConnection.java:184)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603870Z","level":"info","event":"\tat py4j.ClientServerConnection.run(ClientServerConnection.java:108)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.603919Z","level":"info","event":"\tat java.base/java.lang.Thread.run(Thread.java:840)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604020Z","level":"info","event":"\tSuppressed: org.apache.spark.util.Utils$OriginalTryStackTraceException: Full stacktrace of original doTryWithCallerStacktrace caller","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604080Z","level":"info","event":"\t\tat org.apache.spark.sql.errors.QueryExecutionErrors$.catalogPluginClassNotFoundForCatalogError(QueryExecutionErrors.scala:1830)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604137Z","level":"info","event":"\t\tat org.apache.spark.sql.connector.catalog.Catalogs$.load(Catalogs.scala:70)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604202Z","level":"info","event":"\t\tat org.apache.spark.sql.connector.catalog.CatalogManager.$anonfun$catalog$1(CatalogManager.scala:56)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604272Z","level":"info","event":"\t\tat scala.collection.mutable.HashMap.getOrElseUpdate(HashMap.scala:469)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604331Z","level":"info","event":"\t\tat org.apache.spark.sql.connector.catalog.CatalogManager.catalog(CatalogManager.scala:56)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604380Z","level":"info","event":"\t\tat org.apache.spark.sql.connector.catalog.LookupCatalog$CatalogAndNamespace$.unapply(LookupCatalog.scala:86)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604441Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:92)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604492Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:38)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604547Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$2(AnalysisHelper.scala:200)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604599Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(origin.scala:86)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604648Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:200)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604701Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604748Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604855Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.604993Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.605128Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$4(AnalysisHelper.scala:205)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.605215Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren(TreeNode.scala:1231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.605278Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren$(TreeNode.scala:1230)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.605441Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.CreateNamespace.mapChildren(v2Commands.scala:595)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.605558Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:205)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.605605Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.605652Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.605734Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.605814Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.605887Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown(AnalysisHelper.scala:190)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.605980Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown$(AnalysisHelper.scala:189)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.606060Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDown(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.606136Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:38)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.606216Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:35)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.606308Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$2(RuleExecutor.scala:242)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.606403Z","level":"info","event":"\t\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.606486Z","level":"info","event":"\t\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.606567Z","level":"info","event":"\t\tat scala.collection.immutable.List.foldLeft(List.scala:79)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.606649Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1(RuleExecutor.scala:239)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.606731Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1$adapted(RuleExecutor.scala:231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.606809Z","level":"info","event":"\t\tat scala.collection.immutable.List.foreach(List.scala:334)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.606898Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.606988Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$executeSameContext(Analyzer.scala:290)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.607184Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$execute$1(Analyzer.scala:286)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.607286Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.AnalysisContext$.withNewAnalysisContext(Analyzer.scala:234)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.607395Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:286)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.607485Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:249)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.607565Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$executeAndTrack$1(RuleExecutor.scala:201)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.607758Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.QueryPlanningTracker$.withTracker(QueryPlanningTracker.scala:89)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.607948Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.executeAndTrack(RuleExecutor.scala:201)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.608032Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.resolveInFixedPoint(HybridAnalyzer.scala:190)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.608145Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.$anonfun$apply$1(HybridAnalyzer.scala:76)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.608235Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.withTrackedAnalyzerBridgeState(HybridAnalyzer.scala:111)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.608345Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.apply(HybridAnalyzer.scala:71)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.608438Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$executeAndCheck$1(Analyzer.scala:280)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.608536Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.markInAnalyzer(AnalysisHelper.scala:423)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.608625Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:280)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.608718Z","level":"info","event":"\t\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$2(QueryExecution.scala:110)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.608804Z","level":"info","event":"\t\tat org.apache.spark.sql.catalyst.QueryPlanningTracker.measurePhase(QueryPlanningTracker.scala:148)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.608889Z","level":"info","event":"\t\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$2(QueryExecution.scala:278)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.608968Z","level":"info","event":"\t\tat org.apache.spark.sql.execution.QueryExecution$.withInternalError(QueryExecution.scala:654)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.609062Z","level":"info","event":"\t\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$1(QueryExecution.scala:278)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.609153Z","level":"info","event":"\t\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.609260Z","level":"info","event":"\t\tat org.apache.spark.sql.execution.QueryExecution.executePhase(QueryExecution.scala:277)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.609375Z","level":"info","event":"\t\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$1(QueryExecution.scala:110)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.609476Z","level":"info","event":"\t\tat scala.util.Try$.apply(Try.scala:217)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.609577Z","level":"info","event":"\t\tat org.apache.spark.util.Utils$.doTryWithCallerStacktrace(Utils.scala:1378)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.609674Z","level":"info","event":"\t\tat org.apache.spark.util.LazyTry.tryT$lzycompute(LazyTry.scala:46)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.609764Z","level":"info","event":"\t\tat org.apache.spark.util.LazyTry.tryT(LazyTry.scala:46)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.609855Z","level":"info","event":"\t\t... 23 more","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.609948Z","level":"info","event":"Caused by: java.lang.ClassNotFoundException: org.apache.iceberg.spark.SparkCatalog","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610040Z","level":"info","event":"\tat java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:445)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610156Z","level":"info","event":"\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:592)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610259Z","level":"info","event":"\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610365Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.Catalogs$.load(Catalogs.scala:60)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610450Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.CatalogManager.$anonfun$catalog$1(CatalogManager.scala:56)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610508Z","level":"info","event":"\tat scala.collection.mutable.HashMap.getOrElseUpdate(HashMap.scala:469)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610562Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.CatalogManager.catalog(CatalogManager.scala:56)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610624Z","level":"info","event":"\tat org.apache.spark.sql.connector.catalog.LookupCatalog$CatalogAndNamespace$.unapply(LookupCatalog.scala:86)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610677Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:92)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610728Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs$$anonfun$apply$1.applyOrElse(ResolveCatalogs.scala:38)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610779Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$2(AnalysisHelper.scala:200)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610829Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(origin.scala:86)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610880Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:200)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610931Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.610981Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.611029Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.611161Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.611220Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$4(AnalysisHelper.scala:205)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.611271Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren(TreeNode.scala:1231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.611367Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren$(TreeNode.scala:1230)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.611645Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.CreateNamespace.mapChildren(v2Commands.scala:595)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.611820Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.$anonfun$resolveOperatorsDownWithPruning$1(AnalysisHelper.scala:205)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.611892Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.allowInvokingTransformsInAnalyzer(AnalysisHelper.scala:416)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.611947Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning(AnalysisHelper.scala:198)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.612000Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDownWithPruning$(AnalysisHelper.scala:194)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.612052Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDownWithPruning(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.612103Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown(AnalysisHelper.scala:190)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.612153Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.resolveOperatorsDown$(AnalysisHelper.scala:189)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.612203Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.resolveOperatorsDown(LogicalPlan.scala:37)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.612294Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:38)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.612415Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.ResolveCatalogs.apply(ResolveCatalogs.scala:35)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.612517Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$2(RuleExecutor.scala:242)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.612619Z","level":"info","event":"\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.612711Z","level":"info","event":"\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.612791Z","level":"info","event":"\tat scala.collection.immutable.List.foldLeft(List.scala:79)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.612882Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1(RuleExecutor.scala:239)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.612964Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$execute$1$adapted(RuleExecutor.scala:231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613042Z","level":"info","event":"\tat scala.collection.immutable.List.foreach(List.scala:334)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613097Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.execute(RuleExecutor.scala:231)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613148Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.org$apache$spark$sql$catalyst$analysis$Analyzer$$executeSameContext(Analyzer.scala:290)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613198Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$execute$1(Analyzer.scala:286)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613248Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.AnalysisContext$.withNewAnalysisContext(Analyzer.scala:234)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613330Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:286)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613407Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.execute(Analyzer.scala:249)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613461Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.$anonfun$executeAndTrack$1(RuleExecutor.scala:201)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613511Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.QueryPlanningTracker$.withTracker(QueryPlanningTracker.scala:89)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613561Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.rules.RuleExecutor.executeAndTrack(RuleExecutor.scala:201)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613611Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.resolveInFixedPoint(HybridAnalyzer.scala:190)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613681Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.$anonfun$apply$1(HybridAnalyzer.scala:76)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613761Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.withTrackedAnalyzerBridgeState(HybridAnalyzer.scala:111)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613842Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.resolver.HybridAnalyzer.apply(HybridAnalyzer.scala:71)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.613928Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$executeAndCheck$1(Analyzer.scala:280)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.614016Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.markInAnalyzer(AnalysisHelper.scala:423)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.614112Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:280)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.614208Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$2(QueryExecution.scala:110)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.614308Z","level":"info","event":"\tat org.apache.spark.sql.catalyst.QueryPlanningTracker.measurePhase(QueryPlanningTracker.scala:148)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.614407Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$2(QueryExecution.scala:278)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.614612Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution$.withInternalError(QueryExecution.scala:654)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.614723Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$1(QueryExecution.scala:278)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.614792Z","level":"info","event":"\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:804)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.614873Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.executePhase(QueryExecution.scala:277)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.614958Z","level":"info","event":"\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$lazyAnalyzed$1(QueryExecution.scala:110)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.615039Z","level":"info","event":"\tat scala.util.Try$.apply(Try.scala:217)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.615096Z","level":"info","event":"\tat org.apache.spark.util.Utils$.doTryWithCallerStacktrace(Utils.scala:1378)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.615150Z","level":"info","event":"\tat org.apache.spark.util.LazyTry.tryT$lzycompute(LazyTry.scala:46)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.615202Z","level":"info","event":"\tat org.apache.spark.util.LazyTry.tryT(LazyTry.scala:46)","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.615254Z","level":"info","event":"\t... 23 more","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:25.615329Z","level":"info","event":"","chan":"stdout","logger":"task"}
{"timestamp":"2025-08-31T19:07:26.091080Z","level":"error","event":"\r[Stage 0:>                                                          (0 + 1) / 1]\r\r                                                                                \r\r[Stage 5:>                                                       (0 + 13) / 200]\r\r[Stage 5:===>                                                   (13 + 12) / 200]\r\r[Stage 5:======>                                                (24 + 12) / 200]\r\r[Stage 5:========>                                              (31 + 16) / 200]\r\r[Stage 5:===============>                                       (57 + 12) / 200]\r\r[Stage 5:=====================>                                 (77 + 12) / 200]\r\r[Stage 5:==========================>                            (97 + 12) / 200]\r\r[Stage 5:===========================>                          (102 + 14) / 200]\r\r[Stage 5:=============================>                        (110 + 13) / 200]\r\r[Stage 5:==================================>                   (126 + 12) / 200]\r\r[Stage 5:=======================================>              (145 + 15) / 200]\r\r[Stage 5:==========================================>           (158 + 14) / 200]\r\r[Stage 5:===============================================>      (177 + 12) / 200]","chan":"stderr","logger":"task"}
