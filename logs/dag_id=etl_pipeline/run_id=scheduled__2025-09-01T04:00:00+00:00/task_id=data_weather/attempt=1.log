{"timestamp":"2025-09-01T04:26:28.606586","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-09-01T04:26:28.607532","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/main.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-09-01T04:26:29.026270Z","level":"error","event":"WARNING: Using incubator modules: jdk.incubator.vector","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T04:26:29.822173Z","level":"info","event":"WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T04:26:30.609563Z","level":"error","event":"25/09/01 04:26:30 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T04:26:30.784773Z","level":"error","event":"Using Spark's default log4j profile: org/apache/spark/log4j2-defaults.properties","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T04:26:30.785119Z","level":"error","event":"Setting default log level to \"WARN\".","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T04:26:30.785216Z","level":"error","event":"To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T04:26:32.114095Z","level":"error","event":"25/09/01 04:26:32 WARN Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.","chan":"stderr","logger":"task"}
{"timestamp":"2025-09-01T04:26:35.564292Z","level":"info","event":"Iceberg SparkCatalog OK.","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T04:26:36.028341Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T04:26:36.028501Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T04:26:36.028547Z","level":"info","event":"Current task name:data_weather","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T04:26:36.028590Z","level":"info","event":"Dag name:etl_pipeline","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T04:26:36.058045Z","level":"info","event":"Dữ liệu đã lưu: weather_data.json","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T04:26:36.058640","level":"info","event":"Done. Returned value was: weather_data.json","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-09-01T04:26:36.058812","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01990386-be4b-7844-a975-3ced9e807d90'), task_id='data_weather', dag_id='etl_pipeline', run_id='scheduled__2025-09-01T04:00:00+00:00', try_number=1, map_index=-1, hostname='f7ad2ec68ae2', context_carrier={}, task=<Task(PythonOperator): data_weather>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=1, start_date=datetime.datetime(2025, 9, 1, 4, 26, 26, 763656, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
{"timestamp":"2025-09-01T04:26:36.090782Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T04:26:36.090923Z","level":"info","event":" Previous state of the Task instance: running","chan":"stdout","logger":"task"}
{"timestamp":"2025-09-01T04:26:36.090993Z","level":"info","event":"Task operator:<Task(PythonOperator): data_weather>","chan":"stdout","logger":"task"}
